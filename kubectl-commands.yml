commands:
  generic:
    config: kubectl config view #Shows your username for any node.
    port-forward: kubectl port-forward service/myapp-service 8082:80
                  #Where 8082=localhost; 
                  #80=port of myapp-service.
  all:
    view: kubectl get all #Shows all pods, services, replicasets and deployments.
    view-all-components: kubectl get po -A #Shows all kubernetes components.
    deleteAll: kubectl delete --all pods/deployments/services --namespace=foo #namespace is not mandatory if you are using default namespace.
  nodes:
    view: kubectl get nodes
  namespaces:
    view: kubectl get namespaces
  pod:
    create: kubectl create -f <definition file name> (create and apply are same)
    apply: kubectl apply -f <definition file name> (create and apply are same)
    view: kubectl get pods
    detail-info: kubectl describe pod <pod name>
    delete: kubectl delete pod <pod name>
    edit: kubectl edit pod <pod name> #Opens pod definition in an editor.
  replication-controller:
    view: kubectl get replicationcontrollers
    delete: kubectl delete replicationcontroller <replication controller name>
  replica-set:
    delete: kubectl delete replicaset <replica-set name> #Where "replicaset" is type of object. This also deletes underlying pods automatically.
    view: kubectl get replicasets
    replace: kubectl replace -f <replica-set definition file name> #This is to update replica-set definition file with modifications. (For example, we can modify replicas: 6 in yml file.)
    scale: 
      - kubectl scale --replicas=6 -f <replica-set definition file name> #This command will scale replica sets to 6.
      - kubectl scale --replicas=6 replicaset myapp-replicaset #This is an alternate command to scale pods. Where "replicaset" is type of object, and "myapp-replicaset" is name of replica-set.
  deployments:
    create: kubectl create -f <deployment definition file name>
    update: kubectl apply -f <deployment definition file name>
    view: kubectl get deployments
    rollout: kubectl rollout status deployment/<deployment name> #To see status of rollouts
    undo: kubectl rollout undo deployment/<deployment name> #This will destroy new deployed pods and restart old ones.
    view-revisions: kubectl rollout history deployment/<deployment name>
    update-image: kubectl set image deployment <deployment name> <container name>=<image name>:<image version> #This will update image and restart deployment, however image in definition file will not be modified.
  services:
    create: kubectl create -f <service definition file name>
    view: kubectl get services #Gives list of services.
    delete: kubectl delete service <service name> #Deletes a service and underlying objects
  arguments:
    - usage: <command> -o yaml > test.yml
      description: Extracts yaml definition of an object, to test.yml
    - usage: <command> -o wide
      description: Gives verbose mode of information of an object.
    - usage: <command> --dry-run=client
      description: It will allow us to run the object, without creating.
    - usage: <command> --record
      example: kubectl create -f deployment-definition.yml --record
      description: This will record the command you executed, while new deployment happens. (Try running "kubectl rollout history deployment <deployment name>" to see effect)
  